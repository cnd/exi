
Some ideas about dependency graph generation
============================================

The dependency graph contains nodes that are Actions, and
edges that represent Dependencies.

As Actions, we have at least the following:

  Action               Meaning                               Effect
  -------------------  ------------------------------------  -----------
  Build <variant>      "after this, the variant is built"    compilation
  Available <variant>  "after this, we can run the variant"  none


For installed variants v, we can add a node "Available v"
without further dependencies.

If a variant is requested by the user, we want it to be "Available"
in the end.

If we want to insert an "Available" for an uninstalled variant v, we
have to

  * create two nodes, "Available v" and "Build v"
  * there is a (meta-)dependency from "Available v" to "Build v"
  * for all DEPENDs w of v, there are dependencies from
    "Build v" to "Available w"
  * for all RDEPENDs w of v, there are dependencies from
    "Available v" to "Available w"
  * for all PDEPENDs w of v, there are dependencies from
    "Available v" to "Build w"

The following are not well thought-through: what if the blocking
dependencies are already available?

  * for all blocking DEPENDs w of v, there are dependencies
    from "Build w" to "Build v"
  * for all blocking RDEPENDs w of v, there are block-dependencies
    from "Build w" to "Build v"